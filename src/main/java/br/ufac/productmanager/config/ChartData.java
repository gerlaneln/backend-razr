package br.ufac.productmanager.config;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import br.ufac.productmanager.model.ProductScope;

public class ChartData {
    
    private String JSONArray;
    private String categoriesList;
      
    public String getJSONArray() {
        return JSONArray;
    }
    
    public String getCategoriesArray() {
        return categoriesList;
    }

    public ChartData(){}
    
    public ChartData(List<ProductScope> scopes) {
        createJSONArray(scopes);
    }

    private String createJSONObject(String category, String fromDate,
            String toDate, String color, long personnel){  
    
        String s = """
                      {"category":"%s","fromDate":"%s","toDate":"%s","columnSettings":{"fill":"%s"},"personnel":%s}""";

        
        
        
        
        return s.formatted(category,
                           fromDate,
                           toDate,
                           color,
                           personnel);
        
        
        

    }

    private String createJSONProductBar(ProductScope scope, String category) {
        
        String productBar = new String();
        
        int beforeTa = scope.getDistModel().getBeforeTa();
        int afterTa = scope.getDistModel().getAfterTa();
        int projectDuration = beforeTa+afterTa+1;
        
        LocalDate taDate = scope.getProduct().getFirstSA();
        LocalDate projectStart = taDate.minusMonths(beforeTa).plusDays(14);
             
        long personnel = scope.getDistModel().getPersonnel()/(projectDuration);
        
        var random = new Random();
        
        //0x means that this is an hexadecimal integer
        //0xffffff is the maximum number that can be generated by this Random object
        //0x000000 is the minimum number that can be generated by this Random object
        int randomNumber = random.nextInt(0xffffff + 1);
        
        String color = String.format("#%06x", randomNumber);
        String result;
        
        for(int i = 1; i <= projectDuration; i++) {
            
            if(i <= beforeTa) {
                result = createJSONObject(category, projectStart.plusMonths(i-1).toString(),
                                 projectStart.plusMonths(i).toString(), color, personnel);
                
                productBar = productBar.concat(result+",\n");
            
            }else if(i == beforeTa+1){
                randomNumber = random.nextInt(0xffffff + 1);
                String colorTa = String.format("#%06x", randomNumber);
                
                result = createJSONObject(category, projectStart.plusMonths(i-1).toString(),
                        projectStart.plusMonths(i).toString(), colorTa, personnel);
            
                productBar = productBar.concat(result+",\n");
            }else {
                result = createJSONObject(category, projectStart.plusMonths(i-1).toString(),
                        projectStart.plusMonths(i).toString(), color, personnel);
                
                productBar = productBar.concat(result+",\n");
            }
            
        }
        
        return productBar;
    }
    
    

    public void createJSONArray(List<ProductScope> listOfScopes){
        
        JSONArray = new String("[\n");
        List<String> categoriesList = new ArrayList<String>();
        
        for(ProductScope scope : listOfScopes) {
            
            //if scope is null, go to the next scope in the list
            if(scope == null) {
                continue;
            }
            
            String category = scope.getProduct().getTeam().getName();
            
            categoriesList.add(category);
            
            JSONArray = JSONArray + createJSONProductBar(scope, category);
        }
        
        String categoryJSON = createCategoriesArray(categoriesList);
        
        JSONArray = JSONArray + "]";
        
        /*removing the comma from the last JSON object */
        char[] chars = JSONArray.toCharArray();
        //reading backwards for performance reasons
        for(int i = chars.length-1; i == 0; i--) {
            if(chars[i] == ',') {
                chars[i] = ' ';
                //Get out of the loop
                break;
            }
        }
        
        /*assign the JSON array*/
        this.JSONArray = new String(chars);
        /*assign the categories JSON array*/
        this.categoriesList = new String(categoryJSON);
    }
    
    private String createCategoriesArray(List<String> categoriesList) {
        
        String categoryJSON = new String("[\n");
        
        
        for(String cat : categoriesList) {
            //concat the return in the end of string
            categoryJSON = categoryJSON + createCategoryObject(cat);
        }
        
        categoryJSON = categoryJSON + "\n]";
        
        /*removing the comma from the last JSON object */
        char[] chars = categoryJSON.toCharArray();
        //reading backwards for performance reasons
        for(int i = chars.length-1; i == 0; i--) {
            if(chars[i] == ',') {
                chars[i] = ' ';
                //Get out of the loop
                break;
            }
        }
        
        categoryJSON = new String(chars);
        
        return categoryJSON;
    }
    
    private String createCategoryObject(String category) {
        
       return """
                 {"category":"%s"},
                 """.formatted(category); 
    }
}

